// Generated by CoffeeScript 1.9.3
(function() {
  (function(factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery'], factory);
    } else {
      return factory(jQuery);
    }
  })(function($) {
    var config, init;
    config = {
      "protectClass": "fontfixed",
      "attributeClass": "fontsize-class",
      "animate": false,
      "variation": {
        "px": 2,
        "em": 0.2,
        "rem": 0.2,
        "%": 5,
        "vw": 0.5,
        "vh": 0.5,
        "vmax": 0.5,
        "vmin": 0.5
      },
      "max": 2,
      "min": -1
    };
    init = function() {
      var container;
      container = $('#fontsize');
      if (container.length === 0) {
        $('body').append("<div id=\"fontsize\" class=\"" + config.protectClass + "\">\n	<div id=\"fontsize-bigger\">A<sup>+</sup></div>\n	<div id=\"fontsize-smaller\">A<sup>-</sup></div>\n</div>");
      }
      $('#fontsize-bigger').on('click', function() {
        var times;
        times = parseInt($.cookie('fontsize')) + 1;
        if (times > config.max) {
          return;
        }
        $.cookie('fontsize', times, {
          expires: 10000,
          path: '/'
        });
        return window.location.reload();
      });
      $('#fontsize-smaller').on('click', function() {
        var times;
        times = parseInt($.cookie('fontsize')) - 1;
        if (times < config.min) {
          return;
        }
        $.cookie('fontsize', times, {
          expires: 10000,
          path: '/'
        });
        return window.location.reload();
      });
      if ($.cookie('fontsize')) {
        return $('body').fontsize();
      } else {
        return $.cookie('fontsize', 0, {
          expires: 10000,
          path: '/'
        });
      }
    };
    return $.fn.fontsize = function() {
      var args, blocked, process, ref, times;
      args = null;
      if (arguments.length > 1) {
        if ((ref = arguments[0]) === "config" || ref === "init") {
          config = $.extend({}, config, arguments[1]);
        }
        if (arguments[0] === "init") {
          init();
        }
        return this;
      } else if (arguments.length === 1) {
        if (arguments[0] === "init") {
          init();
          return this;
        }
      }
      args = $.extend({}, config, args);
      times = parseInt($.cookie('fontsize'));
      if (times === config.min) {
        $('#fontsize-smaller').addClass('fontsize-disabled');
      }
      if (times === config.max) {
        $('#fontsize-bigger').addClass('fontsize-disabled');
      }
      if (times === 0) {
        return this;
      }
      blocked = function(elem) {
        if (elem.length > 0 && (elem.hasClass(config.protectClass) || elem.attr(config.attributeClass))) {
          return true;
        }
        if (elem.length === 0) {
          return false;
        }
        return blocked(elem.parent());
      };
      process = function(container) {
        return container.children().each(function() {
          var currSize, i, j, k, key, newSize, ref1, ref2, that, unit, variation;
          that = $(this);
          if (that.attr(config.attributeClass)) {
            that.addClass("" + (that.attr(config.attributeClass)) + times);
            return;
          }
          if (blocked(that)) {
            return;
          }
          process(that);
          currSize = that.css('font-size').toLowerCase().split(' ')[0].split('!')[0];
          unit = '';
          variation = 0;
          for (key in args.variation) {
            if (currSize.indexOf(key) > 0) {
              unit = key;
              currSize = currSize.substring(0, currSize.length - key.length);
              variation = args.variation[key];
            }
          }
          newSize = parseFloat(currSize);
          if (times < 0) {
            for (i = j = ref1 = times; ref1 <= 0 ? j <= 0 : j >= 0; i = ref1 <= 0 ? ++j : --j) {
              newSize -= variation;
            }
          } else if (times > 0) {
            for (i = k = 0, ref2 = times; 0 <= ref2 ? k <= ref2 : k >= ref2; i = 0 <= ref2 ? ++k : --k) {
              newSize += variation;
            }
          }
          if (args && args.animate) {
            return that.animate({
              fontSize: newSize + unit
            }, 250);
          } else {
            return that.css({
              fontSize: newSize + unit
            });
          }
        });
      };
      process(this);
      return this;
    };
  });

}).call(this);

//# sourceMappingURL=jquery.fontsize.js.map
